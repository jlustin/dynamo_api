name: release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          pip install poetry
          poetry install
      - name: Lint
        run: |
          poetry run flake8
      - name: Test with pytest
        run: |
          poetry run pytest --cov=./ --cov-report=xml
      - name: Upload code coverage
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          fail_ci_if_error: true
      - name: Checkout main
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          ref: main
          fetch-depth: '0'
      - name: Bump version
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          poetry run semantic-release version
          poetry version $(grep "version" */__init__.py | cut -d "'" -f 2 | cut -d '"' -f 2)
          git commit -m "bump version" -a
      - name: Publish new version
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Get tag version from package version
        run: |
          echo ::set-output name=release_tag::$(grep "version" */__init__.py | cut -d "'" -f 2 | cut -d '"' -f 2)
        id: release
      - name: Create release with new version
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release.outputs.release_tag }}
          release_name: ${{ steps.release.outputs.release_tag }}
          draft: false
          prerelease: false
      - name: Build package and release to PyPI
        env:
          TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry publish --build -r testpypi -u __token__ -p $TEST_PYPI_TOKEN